/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package radar;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class FlightTransformation extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -888284887702492683L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"FlightTransformation\",\"namespace\":\"radar\",\"fields\":[{\"name\":\"to\",\"type\":\"string\"},{\"name\":\"from\",\"type\":\"string\"},{\"name\":\"departureTimestamp\",\"type\":\"long\"},{\"name\":\"arrivalTimestamp\",\"type\":\"long\"},{\"name\":\"duration\",\"type\":\"long\"},{\"name\":\"departureDatetime\",\"type\":\"string\"},{\"name\":\"arrivalDatetime\",\"type\":\"string\"},{\"name\":\"departureAirportCode\",\"type\":\"string\"},{\"name\":\"arrivalAirportCode\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<FlightTransformation> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<FlightTransformation> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<FlightTransformation> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<FlightTransformation> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<FlightTransformation> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this FlightTransformation to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a FlightTransformation from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a FlightTransformation instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static FlightTransformation fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.CharSequence to;
  private java.lang.CharSequence from;
  private long departureTimestamp;
  private long arrivalTimestamp;
  private long duration;
  private java.lang.CharSequence departureDatetime;
  private java.lang.CharSequence arrivalDatetime;
  private java.lang.CharSequence departureAirportCode;
  private java.lang.CharSequence arrivalAirportCode;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public FlightTransformation() {}

  /**
   * All-args constructor.
   * @param to The new value for to
   * @param from The new value for from
   * @param departureTimestamp The new value for departureTimestamp
   * @param arrivalTimestamp The new value for arrivalTimestamp
   * @param duration The new value for duration
   * @param departureDatetime The new value for departureDatetime
   * @param arrivalDatetime The new value for arrivalDatetime
   * @param departureAirportCode The new value for departureAirportCode
   * @param arrivalAirportCode The new value for arrivalAirportCode
   */
  public FlightTransformation(java.lang.CharSequence to, java.lang.CharSequence from, java.lang.Long departureTimestamp, java.lang.Long arrivalTimestamp, java.lang.Long duration, java.lang.CharSequence departureDatetime, java.lang.CharSequence arrivalDatetime, java.lang.CharSequence departureAirportCode, java.lang.CharSequence arrivalAirportCode) {
    this.to = to;
    this.from = from;
    this.departureTimestamp = departureTimestamp;
    this.arrivalTimestamp = arrivalTimestamp;
    this.duration = duration;
    this.departureDatetime = departureDatetime;
    this.arrivalDatetime = arrivalDatetime;
    this.departureAirportCode = departureAirportCode;
    this.arrivalAirportCode = arrivalAirportCode;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return to;
    case 1: return from;
    case 2: return departureTimestamp;
    case 3: return arrivalTimestamp;
    case 4: return duration;
    case 5: return departureDatetime;
    case 6: return arrivalDatetime;
    case 7: return departureAirportCode;
    case 8: return arrivalAirportCode;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: to = (java.lang.CharSequence)value$; break;
    case 1: from = (java.lang.CharSequence)value$; break;
    case 2: departureTimestamp = (java.lang.Long)value$; break;
    case 3: arrivalTimestamp = (java.lang.Long)value$; break;
    case 4: duration = (java.lang.Long)value$; break;
    case 5: departureDatetime = (java.lang.CharSequence)value$; break;
    case 6: arrivalDatetime = (java.lang.CharSequence)value$; break;
    case 7: departureAirportCode = (java.lang.CharSequence)value$; break;
    case 8: arrivalAirportCode = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'to' field.
   * @return The value of the 'to' field.
   */
  public java.lang.CharSequence getTo() {
    return to;
  }


  /**
   * Sets the value of the 'to' field.
   * @param value the value to set.
   */
  public void setTo(java.lang.CharSequence value) {
    this.to = value;
  }

  /**
   * Gets the value of the 'from' field.
   * @return The value of the 'from' field.
   */
  public java.lang.CharSequence getFrom() {
    return from;
  }


  /**
   * Sets the value of the 'from' field.
   * @param value the value to set.
   */
  public void setFrom(java.lang.CharSequence value) {
    this.from = value;
  }

  /**
   * Gets the value of the 'departureTimestamp' field.
   * @return The value of the 'departureTimestamp' field.
   */
  public long getDepartureTimestamp() {
    return departureTimestamp;
  }


  /**
   * Sets the value of the 'departureTimestamp' field.
   * @param value the value to set.
   */
  public void setDepartureTimestamp(long value) {
    this.departureTimestamp = value;
  }

  /**
   * Gets the value of the 'arrivalTimestamp' field.
   * @return The value of the 'arrivalTimestamp' field.
   */
  public long getArrivalTimestamp() {
    return arrivalTimestamp;
  }


  /**
   * Sets the value of the 'arrivalTimestamp' field.
   * @param value the value to set.
   */
  public void setArrivalTimestamp(long value) {
    this.arrivalTimestamp = value;
  }

  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public long getDuration() {
    return duration;
  }


  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(long value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'departureDatetime' field.
   * @return The value of the 'departureDatetime' field.
   */
  public java.lang.CharSequence getDepartureDatetime() {
    return departureDatetime;
  }


  /**
   * Sets the value of the 'departureDatetime' field.
   * @param value the value to set.
   */
  public void setDepartureDatetime(java.lang.CharSequence value) {
    this.departureDatetime = value;
  }

  /**
   * Gets the value of the 'arrivalDatetime' field.
   * @return The value of the 'arrivalDatetime' field.
   */
  public java.lang.CharSequence getArrivalDatetime() {
    return arrivalDatetime;
  }


  /**
   * Sets the value of the 'arrivalDatetime' field.
   * @param value the value to set.
   */
  public void setArrivalDatetime(java.lang.CharSequence value) {
    this.arrivalDatetime = value;
  }

  /**
   * Gets the value of the 'departureAirportCode' field.
   * @return The value of the 'departureAirportCode' field.
   */
  public java.lang.CharSequence getDepartureAirportCode() {
    return departureAirportCode;
  }


  /**
   * Sets the value of the 'departureAirportCode' field.
   * @param value the value to set.
   */
  public void setDepartureAirportCode(java.lang.CharSequence value) {
    this.departureAirportCode = value;
  }

  /**
   * Gets the value of the 'arrivalAirportCode' field.
   * @return The value of the 'arrivalAirportCode' field.
   */
  public java.lang.CharSequence getArrivalAirportCode() {
    return arrivalAirportCode;
  }


  /**
   * Sets the value of the 'arrivalAirportCode' field.
   * @param value the value to set.
   */
  public void setArrivalAirportCode(java.lang.CharSequence value) {
    this.arrivalAirportCode = value;
  }

  /**
   * Creates a new FlightTransformation RecordBuilder.
   * @return A new FlightTransformation RecordBuilder
   */
  public static radar.FlightTransformation.Builder newBuilder() {
    return new radar.FlightTransformation.Builder();
  }

  /**
   * Creates a new FlightTransformation RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new FlightTransformation RecordBuilder
   */
  public static radar.FlightTransformation.Builder newBuilder(radar.FlightTransformation.Builder other) {
    if (other == null) {
      return new radar.FlightTransformation.Builder();
    } else {
      return new radar.FlightTransformation.Builder(other);
    }
  }

  /**
   * Creates a new FlightTransformation RecordBuilder by copying an existing FlightTransformation instance.
   * @param other The existing instance to copy.
   * @return A new FlightTransformation RecordBuilder
   */
  public static radar.FlightTransformation.Builder newBuilder(radar.FlightTransformation other) {
    if (other == null) {
      return new radar.FlightTransformation.Builder();
    } else {
      return new radar.FlightTransformation.Builder(other);
    }
  }

  /**
   * RecordBuilder for FlightTransformation instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<FlightTransformation>
    implements org.apache.avro.data.RecordBuilder<FlightTransformation> {

    private java.lang.CharSequence to;
    private java.lang.CharSequence from;
    private long departureTimestamp;
    private long arrivalTimestamp;
    private long duration;
    private java.lang.CharSequence departureDatetime;
    private java.lang.CharSequence arrivalDatetime;
    private java.lang.CharSequence departureAirportCode;
    private java.lang.CharSequence arrivalAirportCode;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(radar.FlightTransformation.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.to)) {
        this.to = data().deepCopy(fields()[0].schema(), other.to);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.from)) {
        this.from = data().deepCopy(fields()[1].schema(), other.from);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.departureTimestamp)) {
        this.departureTimestamp = data().deepCopy(fields()[2].schema(), other.departureTimestamp);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.arrivalTimestamp)) {
        this.arrivalTimestamp = data().deepCopy(fields()[3].schema(), other.arrivalTimestamp);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.duration)) {
        this.duration = data().deepCopy(fields()[4].schema(), other.duration);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.departureDatetime)) {
        this.departureDatetime = data().deepCopy(fields()[5].schema(), other.departureDatetime);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.arrivalDatetime)) {
        this.arrivalDatetime = data().deepCopy(fields()[6].schema(), other.arrivalDatetime);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.departureAirportCode)) {
        this.departureAirportCode = data().deepCopy(fields()[7].schema(), other.departureAirportCode);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.arrivalAirportCode)) {
        this.arrivalAirportCode = data().deepCopy(fields()[8].schema(), other.arrivalAirportCode);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
    }

    /**
     * Creates a Builder by copying an existing FlightTransformation instance
     * @param other The existing instance to copy.
     */
    private Builder(radar.FlightTransformation other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.to)) {
        this.to = data().deepCopy(fields()[0].schema(), other.to);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.from)) {
        this.from = data().deepCopy(fields()[1].schema(), other.from);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.departureTimestamp)) {
        this.departureTimestamp = data().deepCopy(fields()[2].schema(), other.departureTimestamp);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.arrivalTimestamp)) {
        this.arrivalTimestamp = data().deepCopy(fields()[3].schema(), other.arrivalTimestamp);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.duration)) {
        this.duration = data().deepCopy(fields()[4].schema(), other.duration);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.departureDatetime)) {
        this.departureDatetime = data().deepCopy(fields()[5].schema(), other.departureDatetime);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.arrivalDatetime)) {
        this.arrivalDatetime = data().deepCopy(fields()[6].schema(), other.arrivalDatetime);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.departureAirportCode)) {
        this.departureAirportCode = data().deepCopy(fields()[7].schema(), other.departureAirportCode);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.arrivalAirportCode)) {
        this.arrivalAirportCode = data().deepCopy(fields()[8].schema(), other.arrivalAirportCode);
        fieldSetFlags()[8] = true;
      }
    }

    /**
      * Gets the value of the 'to' field.
      * @return The value.
      */
    public java.lang.CharSequence getTo() {
      return to;
    }


    /**
      * Sets the value of the 'to' field.
      * @param value The value of 'to'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setTo(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.to = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'to' field has been set.
      * @return True if the 'to' field has been set, false otherwise.
      */
    public boolean hasTo() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'to' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearTo() {
      to = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'from' field.
      * @return The value.
      */
    public java.lang.CharSequence getFrom() {
      return from;
    }


    /**
      * Sets the value of the 'from' field.
      * @param value The value of 'from'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setFrom(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.from = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'from' field has been set.
      * @return True if the 'from' field has been set, false otherwise.
      */
    public boolean hasFrom() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'from' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearFrom() {
      from = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureTimestamp' field.
      * @return The value.
      */
    public long getDepartureTimestamp() {
      return departureTimestamp;
    }


    /**
      * Sets the value of the 'departureTimestamp' field.
      * @param value The value of 'departureTimestamp'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setDepartureTimestamp(long value) {
      validate(fields()[2], value);
      this.departureTimestamp = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'departureTimestamp' field has been set.
      * @return True if the 'departureTimestamp' field has been set, false otherwise.
      */
    public boolean hasDepartureTimestamp() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'departureTimestamp' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearDepartureTimestamp() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalTimestamp' field.
      * @return The value.
      */
    public long getArrivalTimestamp() {
      return arrivalTimestamp;
    }


    /**
      * Sets the value of the 'arrivalTimestamp' field.
      * @param value The value of 'arrivalTimestamp'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setArrivalTimestamp(long value) {
      validate(fields()[3], value);
      this.arrivalTimestamp = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalTimestamp' field has been set.
      * @return True if the 'arrivalTimestamp' field has been set, false otherwise.
      */
    public boolean hasArrivalTimestamp() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'arrivalTimestamp' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearArrivalTimestamp() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public long getDuration() {
      return duration;
    }


    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setDuration(long value) {
      validate(fields()[4], value);
      this.duration = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearDuration() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureDatetime' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartureDatetime() {
      return departureDatetime;
    }


    /**
      * Sets the value of the 'departureDatetime' field.
      * @param value The value of 'departureDatetime'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setDepartureDatetime(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.departureDatetime = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'departureDatetime' field has been set.
      * @return True if the 'departureDatetime' field has been set, false otherwise.
      */
    public boolean hasDepartureDatetime() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'departureDatetime' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearDepartureDatetime() {
      departureDatetime = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalDatetime' field.
      * @return The value.
      */
    public java.lang.CharSequence getArrivalDatetime() {
      return arrivalDatetime;
    }


    /**
      * Sets the value of the 'arrivalDatetime' field.
      * @param value The value of 'arrivalDatetime'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setArrivalDatetime(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.arrivalDatetime = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalDatetime' field has been set.
      * @return True if the 'arrivalDatetime' field has been set, false otherwise.
      */
    public boolean hasArrivalDatetime() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'arrivalDatetime' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearArrivalDatetime() {
      arrivalDatetime = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'departureAirportCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getDepartureAirportCode() {
      return departureAirportCode;
    }


    /**
      * Sets the value of the 'departureAirportCode' field.
      * @param value The value of 'departureAirportCode'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setDepartureAirportCode(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.departureAirportCode = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'departureAirportCode' field has been set.
      * @return True if the 'departureAirportCode' field has been set, false otherwise.
      */
    public boolean hasDepartureAirportCode() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'departureAirportCode' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearDepartureAirportCode() {
      departureAirportCode = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'arrivalAirportCode' field.
      * @return The value.
      */
    public java.lang.CharSequence getArrivalAirportCode() {
      return arrivalAirportCode;
    }


    /**
      * Sets the value of the 'arrivalAirportCode' field.
      * @param value The value of 'arrivalAirportCode'.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder setArrivalAirportCode(java.lang.CharSequence value) {
      validate(fields()[8], value);
      this.arrivalAirportCode = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'arrivalAirportCode' field has been set.
      * @return True if the 'arrivalAirportCode' field has been set, false otherwise.
      */
    public boolean hasArrivalAirportCode() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'arrivalAirportCode' field.
      * @return This builder.
      */
    public radar.FlightTransformation.Builder clearArrivalAirportCode() {
      arrivalAirportCode = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public FlightTransformation build() {
      try {
        FlightTransformation record = new FlightTransformation();
        record.to = fieldSetFlags()[0] ? this.to : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.from = fieldSetFlags()[1] ? this.from : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.departureTimestamp = fieldSetFlags()[2] ? this.departureTimestamp : (java.lang.Long) defaultValue(fields()[2]);
        record.arrivalTimestamp = fieldSetFlags()[3] ? this.arrivalTimestamp : (java.lang.Long) defaultValue(fields()[3]);
        record.duration = fieldSetFlags()[4] ? this.duration : (java.lang.Long) defaultValue(fields()[4]);
        record.departureDatetime = fieldSetFlags()[5] ? this.departureDatetime : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.arrivalDatetime = fieldSetFlags()[6] ? this.arrivalDatetime : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.departureAirportCode = fieldSetFlags()[7] ? this.departureAirportCode : (java.lang.CharSequence) defaultValue(fields()[7]);
        record.arrivalAirportCode = fieldSetFlags()[8] ? this.arrivalAirportCode : (java.lang.CharSequence) defaultValue(fields()[8]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<FlightTransformation>
    WRITER$ = (org.apache.avro.io.DatumWriter<FlightTransformation>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<FlightTransformation>
    READER$ = (org.apache.avro.io.DatumReader<FlightTransformation>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.to);

    out.writeString(this.from);

    out.writeLong(this.departureTimestamp);

    out.writeLong(this.arrivalTimestamp);

    out.writeLong(this.duration);

    out.writeString(this.departureDatetime);

    out.writeString(this.arrivalDatetime);

    out.writeString(this.departureAirportCode);

    out.writeString(this.arrivalAirportCode);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.to = in.readString(this.to instanceof Utf8 ? (Utf8)this.to : null);

      this.from = in.readString(this.from instanceof Utf8 ? (Utf8)this.from : null);

      this.departureTimestamp = in.readLong();

      this.arrivalTimestamp = in.readLong();

      this.duration = in.readLong();

      this.departureDatetime = in.readString(this.departureDatetime instanceof Utf8 ? (Utf8)this.departureDatetime : null);

      this.arrivalDatetime = in.readString(this.arrivalDatetime instanceof Utf8 ? (Utf8)this.arrivalDatetime : null);

      this.departureAirportCode = in.readString(this.departureAirportCode instanceof Utf8 ? (Utf8)this.departureAirportCode : null);

      this.arrivalAirportCode = in.readString(this.arrivalAirportCode instanceof Utf8 ? (Utf8)this.arrivalAirportCode : null);

    } else {
      for (int i = 0; i < 9; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.to = in.readString(this.to instanceof Utf8 ? (Utf8)this.to : null);
          break;

        case 1:
          this.from = in.readString(this.from instanceof Utf8 ? (Utf8)this.from : null);
          break;

        case 2:
          this.departureTimestamp = in.readLong();
          break;

        case 3:
          this.arrivalTimestamp = in.readLong();
          break;

        case 4:
          this.duration = in.readLong();
          break;

        case 5:
          this.departureDatetime = in.readString(this.departureDatetime instanceof Utf8 ? (Utf8)this.departureDatetime : null);
          break;

        case 6:
          this.arrivalDatetime = in.readString(this.arrivalDatetime instanceof Utf8 ? (Utf8)this.arrivalDatetime : null);
          break;

        case 7:
          this.departureAirportCode = in.readString(this.departureAirportCode instanceof Utf8 ? (Utf8)this.departureAirportCode : null);
          break;

        case 8:
          this.arrivalAirportCode = in.readString(this.arrivalAirportCode instanceof Utf8 ? (Utf8)this.arrivalAirportCode : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










